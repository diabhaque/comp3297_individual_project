{"version":3,"sources":["home/AddLocationModal.tsx","home/LocationDataTable.tsx","home/LocationSelector.tsx","home/Home.tsx","client/requests.ts","client/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddLocationModal","onSubmit","useState","visible","setVisible","type","onClick","onCreate","values","console","log","onCancel","CollectionCreateForm","Form","useForm","form","title","okText","cancelText","onOk","validateFields","then","resetFields","catch","info","layout","name","initialValues","modifier","Item","label","rules","required","message","style","width","min","LocationDataTable","locationData","columns","Object","keys","map","field","dataIndex","key","dataSource","pagination","Option","Select","LocationSelector","locations","onChange","options","location","value","showSearch","defaultValue","placeholder","optionFilterProp","filterOption","input","option","toLowerCase","indexOf","filterSort","optionA","optionB","localeCompare","Home","setLocations","currentLocation","setCurrentLocation","currentLocationData","setCurrentLocationData","useEffect","isCancelled","url","URL","request","Request","toString","fetch","r","json","getLocations","filter","params","JSON","stringify","resourceURL","apiEndpoint","URLSearchParams","ok","getLocationData","display","flexDirection","justifyContent","fontSize","fontWeight","paddingBottom","paddingTop","borderTop","borderBottom","method","headers","body","addLocation","concat","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efd78415.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Modal, Button, Form, Input, InputNumber } from \"antd\";\nimport { Location } from \"../types/locationTypes\";\nimport { url } from \"node:inspector\";\n\ninterface AddLocationModalProps {\n    onSubmit: (location: Location) => void;\n}\n\nexport const AddLocationModal = ({ onSubmit }: AddLocationModalProps) => {\n    const [visible, setVisible] = useState(false);\n\n    const onCreate = (values: any) => {\n        console.log(\"Received values of form: \", values);\n        onSubmit(values as Location)\n        setVisible(false);\n    };\n\n    return (\n        <div>\n            <Button\n                type=\"primary\"\n                onClick={() => {\n                    setVisible(true);\n                }}\n            >\n                Add Location\n            </Button>\n            <CollectionCreateForm\n                visible={visible}\n                onCreate={onCreate}\n                onCancel={() => {\n                    setVisible(false);\n                }}\n            />\n        </div>\n    );\n};\n\ninterface AddLocationFormProps {\n    visible: boolean;\n    onCreate: (values: Location) => void;\n    onCancel: () => void;\n}\n\nconst CollectionCreateForm = ({\n    visible,\n    onCreate,\n    onCancel\n}: AddLocationFormProps) => {\n    const [form] = Form.useForm();\n    return (\n        <Modal\n            visible={visible}\n            title=\"Add a new Location\"\n            okText=\"Add\"\n            cancelText=\"Cancel\"\n            onCancel={onCancel}\n            onOk={() => {\n                form.validateFields()\n                    .then((values) => {\n                        form.resetFields();\n                        onCreate(values);\n                    })\n                    .catch((info) => {\n                        console.log(\"Validate Failed:\", info);\n                    });\n            }}\n        >\n            <Form\n                form={form}\n                layout=\"vertical\"\n                name=\"form_in_modal\"\n                initialValues={{ modifier: \"public\" }}\n            >\n                <Form.Item\n                    name=\"name\"\n                    label=\"Location Name\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"Please input the name of the location!\"\n                        }\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    name=\"population_size\"\n                    label=\"Current Estimated Population\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"Please input the Current Estimated Population!\"\n                        }\n                    ]}\n                >\n                    <InputNumber style={{width: '100%'}} min=\"0\"/>\n                </Form.Item>\n\n                <Form.Item\n                    name=\"api_endpoint\"\n                    label=\"API Endpoint\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"Please input a valid URL! (e.g. https://www.google.com)\",\n                            type: 'url'\n                        }\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n\n                <Form.Item\n                    name=\"resource_url\"\n                    label=\"URL of Resource\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"Please input a valid URL! (e.g. https://www.google.com)\",\n                            type: 'url'\n                        }\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};\n\n","import { Table } from \"antd\";\nimport { LocationData } from \"../types/locationTypes\";\n\ninterface LocationDataTableProps {\n    locationData: LocationData;\n}\n\nexport const LocationDataTable = ({ locationData }: LocationDataTableProps) => {\n    const columns = Object.keys(locationData).map((field) => {\n        return {\n            title: field,\n            dataIndex: field,\n            key: field\n        };\n    });\n\n    return (\n        <Table dataSource={[{ ...locationData, key: 1 }]} columns={columns} pagination={false}/>\n    );\n};\n","import { Select } from \"antd\";\nimport { ValueType } from \"rc-input-number/lib/utils/MiniDecimal\";\nimport { Location } from \"../types/locationTypes\";\n\ninterface LocationSelectorProps {\n    locations: Location[];\n    onChange: (value: ValueType) => void;\n}\n\nconst { Option } = Select;\n\nexport const LocationSelector = ({\n    locations,\n    onChange\n}: LocationSelectorProps) => {\n\n    const options = locations.map((location)=><Option key={location.name} value={location.name}>{location.name}</Option>)\n    return (\n        <Select\n            showSearch\n            style={{ width: 200 }}\n            onChange={onChange}\n            defaultValue={\"Hong Kong\"}\n            placeholder=\"Search to Select\"\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option?.value.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n            filterSort={(optionA, optionB) =>\n                optionA.value.toLowerCase().localeCompare(optionB.value.toLowerCase())\n            }\n        >\n            {options}\n        </Select>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Location, LocationData } from \"../types/locationTypes\";\nimport { addLocation, getLocations, getLocationData } from \"../client/requests\";\nimport { AddLocationModal } from \"./AddLocationModal\";\nimport { LocationDataTable } from \"./LocationDataTable\";\nimport { LocationSelector } from \"./LocationSelector\";\nimport \"antd/dist/antd.css\";\nimport { ValueType } from \"rc-input-number/lib/utils/MiniDecimal\";\n\nexport const Home = () => {\n    const [locations, setLocations] = useState<Location[]>([]);\n    const [currentLocation, setCurrentLocation] = useState<Location | null>(\n        null\n    );\n    const [\n        currentLocationData,\n        setCurrentLocationData\n    ] = useState<LocationData | null>(null);\n\n    useEffect(() => {\n        let isCancelled = false;\n\n        getLocations().then((r) => {\n            if (!isCancelled) {\n                setLocations(r);\n                setCurrentLocation(\n                    r.filter((location) => location.name === \"Hong Kong\")[0]\n                );\n            }\n        });\n\n        return () => {\n            isCancelled = true;\n        };\n    }, []);\n\n    useEffect(() => {\n        if (currentLocation !== null) {\n            getLocationData(currentLocation).then((r) => {\n                if (r !== null) {\n                    setCurrentLocationData(r[0]);\n                } else {\n                    console.log(\"Could not retrieve location data!\");\n                }\n            });\n        }\n    }, [currentLocation]);\n\n    const onLocationSelectorChange = (value: ValueType) => {\n        setCurrentLocation(\n            locations.filter(\n                (location) => location.name === value.toString()\n            )[0]\n        );\n    };\n\n    const onAddLocationSubmit = (location: Location) => {\n        // CHECK FOR CORRECT RESPONSE\n        addLocation(location).then((r) => {\n            if (r !== null) {\n                setLocations(locations.concat([r]));\n            } else {\n                console.log(\"Error!\");\n            }\n        });\n    };\n\n    return (\n        <div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"center\",\n                    fontSize: \"50px\",\n                    fontWeight: \"bolder\"\n                }}\n            >\n                Cov Retrieve\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"space-around\",\n                    paddingBottom: \"1vh\",\n                    paddingTop: \"1vh\",\n                    borderTop: \"1px solid black\",\n                    borderBottom: \"1px solid black\"\n                }}\n            >\n                <LocationSelector\n                    locations={locations}\n                    onChange={onLocationSelectorChange}\n                />\n                <AddLocationModal onSubmit={onAddLocationSubmit} />\n            </div>\n\n            <div>\n                {currentLocationData && (\n                    <LocationDataTable locationData={currentLocationData} />\n                )}\n            </div>\n        </div>\n    );\n};\n","import { getHostName } from \"./utils\";\nimport { Location, LocationData } from \"../types/locationTypes\";\n\nexport const getLocations = (): Promise<Location[]> => {\n    const url = new URL(`http://${getHostName()}/api/locations`);\n    const request = new Request(url.toString());\n\n    return fetch(request)\n        .then((r) => r.json())\n        .then((r) => r as Location[]);\n};\n\nexport const addLocation = (location: Location): Promise<Location | null> => {\n    const request = new Request(`http://${getHostName()}/api/locations/`, {\n        method: \"post\",\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        },\n        body: JSON.stringify(location)\n    });\n\n    let ok = false;\n    return fetch(request)\n        .then((r) => {\n            ok = r.ok;\n            return r.json();\n        })\n        .then((r) => {\n            if (ok) {\n                return r as Location;\n            } else {\n                return null;\n            }\n        });\n};\n\nexport const getLocationData = (location: Location): Promise<LocationData[] | null> => {\n    let params = {\n        \"q\": JSON.stringify({\n            \"resource\":location.resourceURL,\n            \"section\": 1,\n            \"format\":\"json\",\n            \"filters\":[\n                [1, \"eq\", [\"01/03/2021\"]]\n            ]\n        })\n    }\n    const url = new URL(location.apiEndpoint + '?' + new URLSearchParams(params).toString())\n    const request = new Request(url.toString());\n\n    let ok = false;\n    return fetch(request)\n        .then((r) => {\n            ok = r.ok;\n            return r.json();\n        })\n        .then((r) => {\n            if (ok) {\n                return r as LocationData[];\n            } else {\n                return null;\n            }\n        });\n};\n","export const getHostName = (): string => {\n    return \"https://cov-retrieve.herokuapp.com/\"; // localhost:8000 fix with env variables.\n};","import { Home } from './home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}